import { Injectable } from '@nestjs/common';
import { FilterQuery, ProjectionFields } from 'mongoose';
import { InfluxBucketsService } from 'src/influx-buckets/influx-buckets.service';
import { InfluxConnectionsService } from 'src/influx-connections/influx-connections.service';

import { CreateClientDto } from './dto/create-client.dto';
import { UpdateClientDto } from './dto/update-client.dto';
import { Client, ClientDocument } from './entities/client.entity';
import { UserFromJwt } from 'src/auth/models/UserFromJwt';
import { Role } from 'src/auth/models/Role';
import { ClientsRepository } from './clients.repository';

@Injectable()
export class ClientsService {
  constructor(
    private readonly clientsRepository: ClientsRepository,
    private readonly influxConnectionsService: InfluxConnectionsService,
    private readonly influxBucketsService: InfluxBucketsService,
  ) {}

  async create(createClientDto: CreateClientDto, user: UserFromJwt) {
    if (user.accessLevel === Role.ADMIN) {
      createClientDto.parentId = user.clientId;
    }

    const response = await this.clientsRepository.create(createClientDto);

    if (user.accessLevel === Role.ADMIN) {
      const influxConnection = await this.influxConnectionsService
        .findAll()
        .exec();

      const searchRegExp = /\s/g;
      const bucket = {
        influxConnectionId: influxConnection[0]._id.toString(),
        clientId: response._id.toString(),
        alias: `Autogenerated ${createClientDto.name} bucket`,
        product: 'smart-trafo',
        name: `${createClientDto.name}-smart-trafo`
          .replace(searchRegExp, '-')
          .toLowerCase(),
      };

      this.influxBucketsService.create(bucket);
    }
    return response;
  }

  findAll() {
    return this.clientsRepository.find({});
  }

  async findWhere(whereClause: FilterQuery<ClientDocument>): Promise<Client[]> {
    return this.clientsRepository.find(whereClause);
  }

  findOne(id: string, projection?: ProjectionFields<Client>) {
    return this.clientsRepository.findOne({ _id: id }, projection);
  }

  update(id: string, updateClientDto: UpdateClientDto) {
    return this.clientsRepository.findOneAndUpdate(
      { _id: id },
      updateClientDto,
    );
  }

  remove(id: string) {
    return this.clientsRepository.delete(id);
  }
}
